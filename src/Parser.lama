-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
exp = memo $ eta expr ({
          [Left, { [s("!!"), fun (l, op, r) {Binop (op, l, r)}]}],
          
          [Left, {[s("&&"), fun (l, op, r) {Binop (op, l, r)}]}],
          
          [Nona, {[s("=="), fun (l, op, r) {Binop (op, l, r)}],
            [s("!="), fun (l, op, r) {Binop (op, l, r)}]
          }],
          
          [Nona, {
            [s("<"), fun (l, op, r) {Binop (op, l, r)}],
            [s(">"), fun (l, op, r) {Binop (op, l, r)}],
            [s("<="), fun (l, op, r) {Binop (op, l, r)}],
            [s(">="), fun (l, op, r) {Binop (op, l, r)}]
          }],
          
          [Left, {
            [s("+"), fun (l, op, r) {Binop (op, l, r)}],
            [s("-"), fun (l, op, r) {Binop (op, l, r)}]
          }],
          
          [Left, {
            [s("*"), fun (l, op, r) {Binop (op, l, r)}],
            [s("/"), fun (l, op, r) {Binop (op, l, r)}],
            [s("%"), fun (l, op, r) {Binop (op, l, r)}]
          }]
        }, primary
      );

var stmt = memo $ eta syntax (oneStep | s1=oneStep s[";"] s2=stmt {Seq (s1, s2)}),
      oneStep = memo $ eta syntax (kSkip {Skip}                                   |
                                   kRead x=inbr[s("("), lident, s(")")] {Read(x)} |
                                   kWrite e=inbr[s("("), exp, s(")")] {Write(e)}  |
                                   x=lident s[":="] e=exp {Assn (x, e)}
      );
   

-- Public top-level parser
public parse = stmt;
             

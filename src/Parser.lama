-- Parser 
import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
 }

var eOps = {
  [ Left, {
    [s ("!!"), fun (l, op, r) { Binop (op, l, r) }]
  }
  ],
  [ Left, {
    [s ("&&"), fun (l, op, r) { Binop (op, l, r) }]
  }
  ],
  [ Nona, {
    [s ("=="), fun (l, op, r) { Binop (op, l, r) }],
    [s ("!="), fun (l, op, r) { Binop (op, l, r) }],
    [s ("<="), fun (l, op, r) { Binop (op, l, r) }],
    [s (">="), fun (l, op, r) { Binop (op, l, r) }],
    [s ("<"), fun (l, op, r) { Binop (op, l, r) }],
    [s (">"), fun (l, op, r) { Binop (op, l, r) }]
  }
  ],
  [ Left, {
      [s ("+"), fun (l, op, r) { Binop (op, l, r) }], 
      [s ("-"), fun (l, op, r) { Binop (op, l, r) }]
    }
  ],
  [ Left, {
    [s ("*"), fun (l, op, r) { Binop (op, l, r) }],
    [s ("/"), fun (l, op, r) { Binop (op, l, r) }],
    [s ("%"), fun (l, op, r) { Binop (op, l, r) }] 
    }
  ]
};

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
    exp = memo $ eta expr(eOps, primary);

var seqOps = {
  [ Left, {
    [s (";"), fun (l, op, r) { Seq(l, r) }] 
  }]
};

var branch = memo $ eta syntax (
      e=exp kThen s=stmt b=ifBody { If (e, s, b) }
    ),
    ifBody = memo $ eta syntax (
      empty          { Skip } |
      kElif b=branch    { b } | 
      kElse s=stmt      { s } 
    );

var whileStmt = memo $ eta syntax (
      kWhile c=exp kDo s=stmt kOd { While (c, s) } |
      kDo s=stmt kWhile c=exp kOd { DoWhile (s, c)}
    ),
    forStmt = memo $ eta syntax (
      kFor s1=stmt s[","] c=exp s[","] s2=stmt kDo s3=stmt kOd { Seq (s1, While (c, Seq (s3, s2))) }
    );

var basicStmt = memo $ eta syntax (
      kSkip                             { Skip } |
      x=lident s[":="] e=exp     { Assn (x, e) } |
      kRead  s["("] x=lident s[")"] { Read (x) } |
      kWrite s["("] e=exp s[")"]   { Write (e) } |
      kIf b=branch kFi                     { b } |
      whileStmt                                  |
      forStmt
    ),

    stmt = memo $ eta expr(seqOps, basicStmt);


-- Public top-level parser
public parse = stmt;

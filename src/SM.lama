-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, state, world], insns) {
  case insns of 
    {} -> c
  | i: ost_ ->
    case i of
      READ        ->
        case readWorld(world) of
          [z, world] -> eval(env, [z:stack, state, world], ost_)
        esac
    | WRITE       ->
        case stack of
          (z:stack) -> eval(env, [stack, state, writeWorld(z, world)], ost_)
        esac
    | BINOP (o)   ->
        case stack of
          (s1:s2:stack) -> 
            eval(env, [evalOp(o, s2, s1):stack, state, world], ost_)
        esac
    | LD    (x)   ->  eval(env, [state(x):stack, state, world], ost_)
    | LDA (x)     ->  eval(env, [x:stack, state, world], ost_)
    | ST    (x)   ->
        case stack of
          (z:stack) -> eval(env, [stack, state<-[x, z], world], ost_)
        esac
    | STI         -> 
        case stack of
          v:x:stack -> eval (env, [v:stack, state<-[x, v], world], ost_)
        esac
    | CONST (n)   ->  eval(env, [n:stack, state, world], ost_)
    | LABEL (_)   -> eval(env, c, ost_)
    | JMP (l)     -> eval(env, c, fromLabel(env, l))
    | CJMP (t, l) ->  
        case stack of 
          n:stack -> 
            case [t, n] of 
              ["nz", 0] -> eval(env, [stack, state, world], ost_)
            | ["nz", _] -> eval(env, [stack, state, world], fromLabel(env, l))
            | ["z", 0]  -> eval(env, [stack, state, world], fromLabel(env, l))
            | ["z", _]  -> eval(env, [stack, state, world], ost_)
            esac
        esac      
    | DUP         ->
        case stack of 
          z : _ -> eval (env, [z:stack, state, world], ost_)
        esac
    | DROP        ->
        case stack of 
          _ : stack -> eval (env, [stack, state, world], ost_)
        esac
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
    	 Skip              -> [false, env, emptyBuffer ()]
      | Read  (x)         -> [false, env, singletonBuffer (READ) <+ ST (x)]
      | Var   (x)         -> [false, env, singletonBuffer (LD (x))]
      | Ref   (x)         -> [false, env, singletonBuffer (LDA (x))]
      | Const (n)         -> [false, env, singletonBuffer (CONST (n))]
      | Ignore (e) -> 
          case compile(lab, env, e) of 
            [used, env, code] -> [used, env, code <+ DROP]
          esac 
      | Binop (o, e1, e2) -> 
          case env.genLabels(2) of 
            [afterE1, afterE2, env] -> 
              case compile(afterE1, env, e1) of 
                [e1Used, env, e1code] -> 
                  case compile(afterE2, env, e2) of 
                    [e2Used, env, e2code] ->
                      [false, env, e1code <+> label (afterE1, e1Used) <+> e2code <+> label (afterE2, e2Used) <+ BINOP (o)]
                  esac
              esac
          esac
      | Write (e)         -> 
          case env.genLabel of
            [eLab, env] ->
                case compile(eLab, env, e) of 
                  [used, env, code] -> [false, env, code <+> label (eLab, used) <+ WRITE]
                esac
          esac
      | Assn  (x, e)      -> 
          case env.genLabels(2) of
            [eLab, xLab, env] ->
              case compile(eLab, env, e) of 
                [eUsed, env, eCode] ->
                  case compile(xLab, env, x) of 
                    [xUsed, env, xCode] -> [false, env, xCode <+> label (xLab, xUsed) <+> eCode <+> label (eLab, eUsed) <+ STI]
                  esac
              esac
          esac
      | Seq   (s1, s2) ->
          case env.genLabel of
            [s2Lab, env] ->
              case compile (s2Lab, env, s1) of
                [s2LabUsed, env, s1Code] ->
                    case compile (lab, env, s2) of
                      [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                    esac
              esac
          esac
      | While (e, s) ->
        case env.genLabels(3) of 
          [toCondLab, toCodeLab, eLab, env] -> 
            case compile(toCondLab, env, s) of 
              [_, env, sCode] -> 
                case compile(eLab, env, e) of
                  [eUsed, env, eCode] -> 
                    [false, env, singletonBuffer(JMP (toCondLab)) <+ LABEL (toCodeLab) <+> sCode <+ LABEL (toCondLab) <+> eCode <+> label (eLab, eUsed) <+ CJMP ("nz", toCodeLab)]
                esac 
            esac
        esac
      | DoWhile (s, e) ->
        case env.genLabels(3) of 
          [toCondLab, toCodeLab, eLab, env] -> 
            case compile(toCondLab, env, s) of 
              [_, env, sCode] -> 
                case compile(eLab, env, e) of
                  [eUsed, env, eCode] -> [false, env, singletonBuffer(LABEL (toCodeLab)) <+> sCode <+ LABEL (toCondLab) <+> eCode <+> label (eLab, eUsed) <+ CJMP ("nz", toCodeLab)]
                esac
            esac
        esac
      | If (e, s1, s2) ->
        case env.genLabels(3) of 
          [s1Lab, toS2Lab, eLab, env] ->
            case compile (s1Lab, env, s1) of 
              [s1Used, env, s1Code] ->
                case compile (lab, env, s2) of 
                  [_, env, s2Code] -> 
                    case compile(eLab, env, e) of
                      [eUsed, env, eCode] -> [true, env, eCode <+> label (eLab, eUsed) <+ CJMP ("z", toS2Lab) <+> s1Code <+>  label(s1Lab, s1Used) <+ JMP (lab) <+ LABEL (toS2Lab) <+> s2Code]
                    esac
                esac
            esac
        esac
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}


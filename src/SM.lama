-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, state, w], insns) {
  case insns of
    {} -> c 
  | BINOP (s): new_inst -> 
                          case stack of x:y:tail -> eval([evalOp(s, y, x):tail, state, w],new_inst) esac
  | CONST (n): new_inst -> 
                          eval([n:stack, state, w], new_inst)
  | READ:new_inst      ->
                          case readWorld(w) of [n, nw] -> eval([n:stack, state,nw], new_inst) esac
  | WRITE: new_inst     ->
                          case stack of (x:tail) ->
                          case writeWorld(x, w) of nw -> eval([tail, state,nw], new_inst) esac
                          esac
  | LD (x): new_inst   -> eval([state(x):stack, state, w], new_inst)
  | ST(x): new_inst     -> case stack of (y:tail) 
                          -> 
                          eval([ tail, state<-[x,y], w], new_inst) esac
  esac  
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
    case expr of
    	Var (x) -> {LD (x)}
    	| Const (n) -> {CONST (n) }
    	| Binop (op, l, r) -> compileExpr(l) +++ compileExpr(r) +++ {BINOP(op)}
    esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
    case stmt of
  	Skip -> {}
  	| Assn   (s, expr) -> compileExpr(expr) +++ {ST(s)}
  	| Read (s) -> {READ, ST(s)}
  	| Write (e) -> compileExpr(e) +++ {WRITE}
  	| Seq (s1, s2) -> compileSM(s1) +++  compileSM(s2)
    esac
}

